#!/bin/bash
set -e

export PATH=/usr/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
PING_TARGET=193.10.227.25 # may be overwritten by defaults
VETH_IPRANGE=172.18

. /etc/default/monroe-experiments

function mk_disk {
  # create and mount a base expereriment lvm disk
  # $1 - unique disk name
  mkdir -p $BASEDIR/$1
  if mountpoint -q $BASEDIR/$1; then
    echo "$1 outdir is mounted."
  else
    MNTPNT=""
    if [ -b /dev/vg-monroe/cont-$1 ]; then
      echo "logical volume exists on vg-monroe";
      MNTPNT=/dev/vg-monroe/cont-$1
    elif [ -b /dev/Monroe-X-vg/cont-$1 ]; then
      echo "logical volume exists on Monroe-X-vg (deprecated)";
      MNTPNT=/dev/Monroe-X-vg/cont-$1
    else
      mkdir -p $BASEDIR/$1
      if [ $(lvcreate -L 100M vg-monroe -n cont-$1) ]; then
        MNTPNT=/dev/vg-monroe/cont-$1
      elif [ $(lvcreate -L 100M Monroe-X-vg -n cont-$1) ]; then
        MNTPNT=/dev/Monroe-X-vg/cont-$1
      else
        if [ ! -f $BASEDIR/$1.disk ]; then
          dd if=/dev/zero of=$BASEDIR/$1.disk bs=100000000 count=1
        fi
        MNTPNT=$BASEDIR/$1.disk
      fi
    fi;
    if [ -z "$(file -sL $MNTPNT | grep ext4)" ]; then
      mkfs.ext4 $MNTPNT -F -L $1
    fi
    mount -t ext4 $MNTPNT $BASEDIR/$1
  fi
}

function ifnum {
  # generate a unique static IP for each interface name
  # $1 - interface name (e.g wwan0)
  echo -n "$VETH_IPRANGE."
  echo $1 | sed -e 's/\([^0-9]\+\)\([0-9]\+\)/\2-\1/g' \
    -e 's/-wwan/1/g' \
    -e 's/-ppp/2/g' \
    -e 's/-eth/3/g' \
    -e 's/-usb/4/g' \
    -e 's/-wlan/5/g' \
    -e 's/^0*//g'
}

function iftable {
  # return the routing table that holds routing data for a given interface
  # $1 - interface name (e.g wwan0)
  curl -s http://localhost:88/dlb | jq '.interfaces[] | select(.name=="'$1'") | .ip4table'
}

function update_dnsmasq_conf {
  # create regex to replace interface names
  # no parameters, copies and replaces a file in /tmp
  TRANSLATE=""
  for i in $(curl -s http://localhost:88/dlb|jq -r .interfaces[].name); do
    OPIF=$(usb2op $i)
    IPAD=$(ifnum $i).2
    TRANSLATE="$TRANSLATE -e s/[0-9.]\+@$i/$IPAD@$OPIF/g"
  done

  mv /tmp/dnsmasq-servers-netns-monroe.conf /tmp/dnsmasq-servers-netns-monroe.bak || true
  cat /etc/dnsmasq.d/dnsmasq-custom.conf | grep -v servers-file | grep -v "=8.8" > /tmp/dnsmasq-servers-netns-monroe.conf
  sed $TRANSLATE /tmp/dnsmasq-servers.conf >> /tmp/dnsmasq-servers-netns-monroe.conf

  # return non-empty if the files differ, or the bak file does not exist
  diff /tmp/dnsmasq-servers-netns-monroe.conf /tmp/dnsmasq-servers-netns-monroe.bak 2>&1 || true
}

##############################################################################

MAINTENANCE=$(cat /monroe/maintenance/enabled || echo 0)
DEVELOPMENT=$(cat /monroe/development/enabled || echo 0)
if [ $MAINTENANCE -eq 1 ] || [ $DEVELOPMENT -eq 1 ]; then
  docker stop -t 0 $(docker ps -q) || true;
  logger -t monroe-experiments "system in maintenance mode.";
  exit 1
fi

if [ ! -f "$KEY" ]; then
  logger -t monroe-experiments "repository key does not exist.";
  exit 1;
fi

exec 42>/var/lock/monroe-experiments.lock
flock -n 42 || {
  logger -t monroe-experiments "lock file present";
  LOCKAGE=$(cat /tmp/monroe-experiments.last || echo 0)
  if (( $(date +%s) - $LOCKAGE > 600 )); then
    rm /var/lock/monroe-experiments.lock;
  fi
  exit 1;
}
trap "flock -u 42" EXIT


mk_disk "ping";
mk_disk "metadata";
mk_disk "mplane";
mk_disk "tstat";

for CONTAINER in $(docker ps -aq); do
  IMAGEID=$(docker inspect --format '{{.Image}}' $CONTAINER)
  if [ "$(docker inspect --format='{{.State.Running}}' $CONTAINER)" == "false" ]; then
    # remove stale containers, unless they are user experiments
    if [[ ! "$(docker inspect --format '{{.Config.Image}}' $CONTAINER)" == "monroe-"* ]]; then
      docker rm $CONTAINER || true;
    fi;
  else
    # stop and remove running containers, if their images have been untagged (updated)
    if [[ "$(docker inspect --format '{{.RepoTags}}' $IMAGEID)" == "[]" ]]; then
      docker stop -t 0 $CONTAINER || true;
      docker rmi -f $IMAGEID || true;
    fi;
  fi;
done
# clean stale images
docker rmi $(docker images -a|grep '<none>'|awk "{print \$3}") 2>/dev/null || true

MNS="ip netns exec monroe";

CID=$(docker ps --no-trunc | grep $URL_NOOP | awk '{print $1}' | head -n 1)

if [ ! -e /var/run/netns/monroe ] || [ -z "$CID" ]; then
  # stop any running containers
  docker stop -t 0 $(docker ps -q) || true;

  docker run -d --net=none $URL_NOOP /bin/sh /opt/monroe/noop.sh;
  CID=$(docker ps --no-trunc | grep $URL_NOOP | awk '{print $1}' | head -n 1)
  PID=$(docker inspect -f '{{.State.Pid}}' $CID)
  mkdir -p /var/run/netns;
  rm /var/run/netns/monroe 2>/dev/null || true;
  ln -s /proc/$PID/ns/net /var/run/netns/monroe;

  ip link del montmp || true;
  ip link del docker0 || true; # legacy. should be moved to a different IP
  ip link del metadata || true;
  ip link add metadata type veth peer name montmp;
  ip link set montmp netns monroe;
  ip addr add 172.17.0.1/24 dev metadata;
  ip link set metadata up;
  $MNS ip link set montmp name metadata;
  $MNS ip addr add 172.17.0.2/24 dev metadata;
  $MNS ip link set metadata up;

  logger -t monroe-experiments "Started noop container and monroe netns."
fi

if [ ! -e /var/run/netns/monroe ]; then
  logger -t monroe-experiments "Network namespace is missing.";
  exit 1;
fi

DNS_CHANGED=$(update_dnsmasq_conf)

if [ -z "$(pgrep -f dnsmasq-monroe)" ]; then
  logger -t monroe-experiments "dnsmasq is not started, restarting."
  $MNS /usr/sbin/dnsmasq -C /tmp/dnsmasq-servers-netns-monroe.conf -x /run/dnsmasq/dnsmasq-monroe.pid -u dnsmasq
elif [ ! -z "$DNS_CHANGED" ]; then
  kill -9 $(cat /run/dnsmasq/dnsmasq-monroe.pid) || true
  $MNS /usr/sbin/dnsmasq -C /tmp/dnsmasq-servers-netns-monroe.conf -x /run/dnsmasq/dnsmasq-monroe.pid -u dnsmasq
fi

CID=$(docker ps --no-trunc | grep $URL_NOOP | awk '{print $1}' | head -n 1)

INTERFACES_BR="$(modems | jq -r .[].ifname) eth0 wlan0"
INTERFACES_PING="op0 op1 op2 op3 op4";

for IF in $INTERFACES_BR; do
  OP=$(usb2op $IF) || continue
  if [ -z "$(ip link|grep ${IF}:)" ]; then
    $MNS ip link del $OP 2>/dev/null || true;
    continue;
  fi
  if [ ! -z "$(ip link|grep 'state DOWN'|grep ${IF}:)" ]; then
    $MNS ip link set $OP down 2>/dev/null || true;
    continue;
  fi
  if [ ! -z "$($MNS ip link|grep ${OP}@)" ]; then
    $MNS ip link set $OP up;
    continue;
  fi
  if [ -z "$(ip link|grep ${IF}Br:)" ]; then
    IPRANGE=$(ifnum $IF)
    TABLE=$(iftable $IF)
    if [ -z "$TABLE" ]; then continue; fi
    OUTMASK=$(ip a show dev $IF|grep inet|head -n 1|cut -f6 -d' ')
    OUTRANGE="${OUTMASK%.*}"
    OUTADDR="${OUTMASK%/*}"
    MTU=$(cat /sys/class/net/${IF})
#    GATEWAY=$(ip ro show table all|grep $OUTRANGE|grep default|head -n 1|cut -f3 -d' ')

    # create veth interface pair
    ip link del montmp || true;
    ip link del ${IF}Br || true;
    ip link add ${IF}Br type veth peer name montmp;
    ip link set dev ${IF}Br mtu $MTU;
    ip link set dev montmp mtu $MTU;
    ip link set montmp netns monroe;
    ip addr add ${IPRANGE}.1/24 dev ${IF}Br;
    ip link set ${IF}Br up;
    $MNS ip link set montmp name $OP;
    $MNS ip addr add ${IPRANGE}.2/24 dev $OP;
    $MNS ip link set $OP up;

    # Firewall masquerade internal IFBr to IF
    TARGET="/etc/circle.d/50-$IF-nat.rules"
#\${ipt4} -t nat -A POSTROUTING -s ${IPRANGE}.2/24 -o ${IF} -j SNAT --to-source ${OUTADDR}
    RULES="\
\${ipt4} -t nat -A POSTROUTING -s ${IPRANGE}.2/24 -o ${IF} -j MASQUERADE
\${ipt4} -I FORWARD 1 -i ${IF} -o ${IF}Br -j ACCEPT
\${ipt4} -I FORWARD 1 -i ${IF}Br -o ${IF} -j ACCEPT"
    echo "$RULES" > $TARGET
    circle start

    # Routing OP to gateway in netns monroe
    $MNS ip ro flush table $TABLE || true
    $MNS ip ro add default via ${IPRANGE}.1 table $TABLE
    for cmd in "del" "add"; do
      $MNS ip ru $cmd from ${IPRANGE}.2 lookup $TABLE priority 10000 || true
      $MNS ip ru $cmd from all to ${IPRANGE}.2/24 lookup $TABLE priority 20000 || true
      $MNS ip ru $cmd from all iif lo lookup $TABLE priority 91000 || true
    done

    # Routing IFBr to IF in host (using table allocator tables)
    ip rule delete from $IPRANGE.1/24 || true
    ip rule add from $IPRANGE.1/24 table $TABLE priority 10000
  fi

done
NODEID=$(cat /etc/nodeid)

for IF in $INTERFACES_PING; do
  if [ ! -z "$($MNS ip link|grep $IF)" ]; then
    if [ -z "$(docker ps --no-trunc|grep $URL_PING|grep $IF)" ]; then
      COUNT=$(cat $BASEDIR/ping.counter 2>/dev/null || echo 0)
      COUNT=$(($COUNT + 1))
      echo $COUNT > $BASEDIR/ping.counter

      IMAGEID=$(docker images -q --no-trunc $URL_PING|head -n 1)

      echo "{\"nodeid\":\"$NODEID\", \
             \"guid\":\"$IMAGEID.0.$NODEID.$COUNT\", \
             \"server\":\"$PING_TARGET\", \
             \"interfacename\": \"$IF\"}" > $BASEDIR/ping.$IF.conf

      rm $BASEDIR/ping/tmp* || true;
      docker run -d --net=container:$CID -v $BASEDIR/ping:/monroe/results -v /etc/nodeid:/nodeid:ro -v $BASEDIR/ping.$IF.conf:/monroe/config:ro $URL_PING $IF || true;
      logger -t monroe-experiments "started ping container on $IF.";
    fi;
  fi;
done

if [ -z "$(docker ps --no-trunc|grep $URL_METADATA)" ]; then
  echo "{\"nodeid\":\"$NODEID\"}" > $BASEDIR/metadata.conf
  rm $BASEDIR/metadata/tmp* || true;
  docker run -d --net=container:$CID -v $BASEDIR/metadata:/monroe/results -v /etc/nodeid:/nodeid:ro -v $BASEDIR/metadata.conf:/monroe/config:ro $URL_METADATA || true;
  logger -t monroe-experiments "started metadata container.";
fi

if [ -z "$(docker ps --no-trunc|grep $URL_MPLANE)" ]; then
  mkdir -p $BASEDIR/tstat # shared folder for tstat results
  rm $BASEDIR/mplane/tmp* || true;
  docker run -d --net=container:$CID \
             -v $BASEDIR/mplane:/monroe/results \
             -v $BASEDIR/tstat:/monroe/tstat    \
             -v /etc/nodeid:/nodeid:ro \
             $URL_MPLANE || true;
  logger -t monroe-experiments "started mplane container.";
fi

monroe-rsync-results     || true
monroe-user-experiments  || true

echo $(date +%s) > /tmp/monroe-experiments.last
