#!/bin/bash
set -e

export PATH=/usr/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

. /etc/default/monroe-experiments

SSH="ssh -i $KEY -p 2280 -oStrictHostKeyChecking=no -o ConnectTimeout=30"
RSYNC_PARMS="-r --include '*/' --include '*.json' --include '*.gz' --exclude '*' --prune-empty-dirs"
RSYNC_ALL="$RSYNC_PARMS -e '$SSH' --remove-source-files --stats --timeout=30 $BASEDIR/ $REPO:$TODIR"
RSYNC_LS="rsync --ignore-missing-args $RSYNC_PARMS"

USER_RSYNC_PARMS="-r --exclude '/*.*' --prune-empty-dirs"
USER_RSYNC="$USER_RSYNC_PARMS -e '$SSH' --remove-source-files --timeout=30 $USERDIR/ $USER_REPO:$USER_TODIR"


function mk_disk {
  mkdir -p $BASEDIR/$1
  if mountpoint -q $BASEDIR/$1; then
    echo "$1 outdir is mounted"
  else
    MNTPNT=""
    if [ -b /dev/vg-monroe/cont-$1 ]; then
      echo "logical volume exists on vg-monroe";
      MNTPNT=/dev/vg-monroe/cont-$1
    elif [ -b /dev/Monroe-X-vg/cont-$1 ]; then
      echo "logical volume exists on Monroe-X-vg (deprecated)";
      MNTPNT=/dev/Monroe-X-vg/cont-$1
    else
      mkdir -p $BASEDIR/$1
      if [ $(lvcreate -L 100M vg-monroe -n cont-$1) ]; then
        MNTPNT=/dev/vg-monroe/cont-$1
      elif [ $(lvcreate -L 100M Monroe-X-vg -n cont-$1) ]; then
        MNTPNT=/dev/Monroe-X-vg/cont-$1 
      else 
        if [ ! -f $BASEDIR/$1.disk ]; then
          dd if=/dev/zero of=$BASEDIR/$1.disk bs=100000000 count=1
        fi
        MNTPNT=$BASEDIR/$1.disk 
      fi
    fi;
    if [ -z "$(file -sL $MNTPNT | grep ext4)" ]; then 
      mkfs.ext4 $MNTPNT -F -L $1
    fi
    mount -t ext4 $MNTPNT $BASEDIR/$1
  fi
}

function merge {
  ALLFILES=$(find $1 -type f -name \*.json)
  TMPMERGEFILE=$(mktemp --tmpdir=$1)
  FILECOUNT=$(echo ${ALLFILES} |grep -o '.json'|wc -l)
  if [ $FILECOUNT -ge 2 ]; then
    base=$(echo ${ALLFILES} | cut -f 1-2 -d . | rev |  cut -d / -f 1 | rev)
    MERGEDFILE="$1/${base}_merged_$(date +%s).json"
    cat ${ALLFILES} >> ${TMPMERGEFILE} &&
    mv ${TMPMERGEFILE} ${MERGEDFILE} &&
    rm ${ALLFILES}                &&  # only if successful
    logger -t monroe-experiments "Appended $FILECOUNT files to ${MERGEDFILE}"
    rm -f ${TMPMERGEFILE} # If step mv (or rm) failed above, always delete the tmpmergefile
  fi;
}

##############################################################################

if [ ! -f "$KEY" ]; then
  logger -t monroe-experiments "repository key does not exist.";
  exit 1;
fi

exec 42>/var/lock/monroe-experiments.lock
flock -n 42 || {
  logger -t monroe-experiments "lock file present";
  exit 1;
}
trap "flock -u 42" EXIT


mk_disk "ping";
mk_disk "metadata";
mk_disk "mplane";
mk_disk "tstat";

for CONTAINER in $(docker ps -aq); do
  IMAGEID=$(docker inspect --format '{{.Image}}' $CONTAINER)
  if [ "$(docker inspect --format='{{.State.Running}}' $CONTAINER)" == "false" ]; then
    # remove stale containers, unless they are user experiments
    if [[ ! "$(docker inspect --format '{{.Config.Image}}' $CONTAINER)" == "monroe-"* ]]; then
      docker rm $CONTAINER || true;
      docker rmi $IMAGEID || true;
    fi;
  else
    # stop and remove running containers, if their images have been untagged (updated)
    if [[ "$(docker inspect --format '{{.RepoTags}}' $IMAGEID)" == "[]" ]]; then 
      docker stop -t 0 $CONTAINER || true;
      docker rmi -f $IMAGEID || true;
    fi;
  fi;
done
# clean stale images
docker rmi $(docker images -a|grep '^<none>'|awk "{print \$3}") 2>/dev/null || true

MNS="ip netns exec monroe";

CID=$(docker ps --no-trunc | grep $URL_NOOP | awk '{print $1}' | head -n 1)

if [ ! -e /var/run/netns/monroe ] || [ -z "$CID" ]; then
  # stop any running containers
  if [ ! -z "$CID" ]; then
    docker stop -t 0 $CID;
  fi
  # stop any multi client running in that namespace
  pgrep -f multi-netns-monroe | xargs -r kill

  docker pull $URL_NOOP 2> /dev/null;
  docker run -d --net=bridge $URL_NOOP;
  CID=$(docker ps --no-trunc | grep $URL_NOOP | awk '{print $1}' | head -n 1)
  PID=$(docker inspect -f '{{.State.Pid}}' $CID)
  mkdir -p /var/run/netns;
  rm /var/run/netns/monroe 2>/dev/null || true;
  ln -s /proc/$PID/ns/net /var/run/netns/monroe;

  # rename the docker bridge interface 'eth0' to 'metadata'
  IP=$($MNS ip route | tail -n 1 | awk '{print $NF}')
  $MNS ifconfig eth0 down;
  $MNS ip link set eth0 name metadata;
  $MNS ifconfig metadata $IP up;

  logger -t monroe-experiments "Started noop container and monroe netns."
fi

if [ ! -e /var/run/netns/monroe ]; then
  logger -t monroe-experiments "Network namespace is missing.";
  exit 1;
fi

if [ -z "$(ps ax|grep multi|grep netns-monroe)" ]; then
  logger -t monroe-experiments "multi is not started, restarting.";
  $MNS multi_client -d -c /etc/multi-netns-monroe.yaml;
fi

CID=$(docker ps --no-trunc | grep $URL_NOOP | awk '{print $1}' | head -n 1)

INTERFACES="usb0 usb1 usb2 wlan0 eth0";
INTERFACES_PING="op0 op1 op2";

for IF in $INTERFACES; do
  OP=$(usb2op $IF) || continue
  if [ -z "$(ip link|grep $IF)" ]; then
    $MNS ip link del $OP 2>/dev/null || true;
    continue;
  fi
  if [ ! -z "$(ip link|grep 'state DOWN'|grep $IF)" ]; then
    $MNS ifconfig $OP down 2>/dev/null || true;
    continue;
  fi
  if [ ! -z "$($MNS ip link|grep $OP)" ]; then
    $MNS ifconfig $OP up;
    continue;
  fi

  ip link del montmp 2>/dev/null || true;
  ip link add link $IF montmp type macvlan || continue;
  ip link set montmp netns monroe;
  $MNS ip link set montmp name $OP;

  # TODO: do a proper network configuration, or run multi inside the container
  $MNS ifconfig $OP up;
done

NODEID=$(cat /etc/nodeid)

for IF in $INTERFACES_PING; do
  if [ ! -z "$($MNS ip link|grep $IF)" ]; then
    if [ -z "$(docker ps --no-trunc|grep $URL_PING|grep $IF)" ]; then
      docker login -u $KAU_USER -p $KAU_PASS $KAU_REPO  &&
      docker pull $URL_PING 2> /dev/null                || true;  # if the pull fails, try a local copy

      COUNT=$(cat $BASEDIR/ping.counter 2>/dev/null || echo 0)
      COUNT=$(($COUNT + 1))
      echo $COUNT > $BASEDIR/ping.counter

      IMAGEID=$(docker images -q --no-trunc $URL_PING)
      
      echo "{\"nodeid\":\"$NODEID\", \
             \"guid\":\"$IMAGEID.0.$NODEID.$COUNT\", \
             \"interfacename\": \"$IF\"}" > $BASEDIR/ping.$IF.conf

      docker run -d --net=container:$CID -v $BASEDIR/ping:/monroe/results -v /etc/nodeid:/nodeid:ro -v $BASEDIR/ping.$IF.conf:/monroe/config:ro $URL_PING $IF || true;
      logger -t monroe-experiments "started ping container on $IF.";
    fi;
  fi;
done

if [ -z "$(docker ps --no-trunc|grep $URL_METADATA)" ]; then
  docker login -u $KAU_USER -p $KAU_PASS $KAU_REPO  &&
  docker pull $URL_METADATA 2> /dev/null            || true;

  echo "{\"nodeid\":\"$NODEID\"}" > $BASEDIR/metadata.conf
  docker run -d --net=container:$CID -v $BASEDIR/metadata:/monroe/results -v /etc/nodeid:/nodeid:ro -v $BASEDIR/metadata.conf:/monroe/config:ro $URL_METADATA || true;
  logger -t monroe-experiments "started metadata container.";
fi

if [ -z "$(docker ps --no-trunc|grep $URL_MPLANE)" ]; then
  docker pull $URL_MPLANE 2> /dev/null || true;
  mkdir -p $BASEDIR/tstat # shared folder for tstat results
  docker run -d --net=container:$CID \
             -v $BASEDIR/mplane:/monroe/results \
             -v $BASEDIR/tstat:/monroe/tstat    \
             -v /etc/nodeid:/nodeid:ro \
             $URL_MPLANE $MPLANE_PASSWORD || true;
  logger -t monroe-experiments "started mplane container.";
fi

echo "Starting rsync of $($RSYNC_LS $BASEDIR | grep json | wc -l) JSON files (and .gz) to $REPO...";
echo rsync $RSYNC_ALL
if eval "rsync --stats $RSYNC_ALL"; then
  echo "rsync done, $($RSYNC_LS $BASEDIR | grep json | wc -l) JSON files arrived while syncing.";
else
  logger -t monroe-experiments "Copying experiment data failed.";
  merge $BASEDIR/ping;
  merge $BASEDIR/metadata;
fi

monroe-user-experiments
