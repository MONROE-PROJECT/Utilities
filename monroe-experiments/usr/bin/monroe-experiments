#!/bin/bash
set -e

. /etc/default/monroe-experiments

SSH="ssh -i $KEY -p 2280 -o ConnectTimeout=30"
RSYNC_PARMS="-r --include '*/' --include '*.json' --exclude '*' --prune-empty-dirs"
RSYNC_ALL="$RSYNC_PARMS -e '$SSH' --remove-source-files --stats --timeout=30 $BASEDIR $REPO:$TODIR"
RSYNC_LS="rsync --ignore-missing-args $RSYNC_PARMS"

function mk_disk {
  mkdir -p $BASEDIR/$1
  if mountpoint -q $BASEDIR/$1; then
    echo "$1 outdir is mounted"
  else
    mkdir -p $BASEDIR/$1
    if [ -f $BASEDIR/$1.disk ]; then
      echo "$1 disk image exists"
    else
      dd if=/dev/zero of=$BASEDIR/$1.disk bs=100000000 count=1
      mkfs.ext4 $BASEDIR/$1.disk -F -L $1
    fi;
    mount -t ext4 -o loop,data=journal,nodelalloc,barrier=1 $BASEDIR/$1.disk $BASEDIR/$1
  fi
}

function merge {
  ALLFILES=$(find $1 -type f -name \*.json)
  TMPMERGEFILE=$(mktemp --tmpdir=$1)
  FILECOUNT=$(echo ${ALLFILES} |grep -o '.json'|wc -l)
  if [ $FILECOUNT -ge 2 ]; then
    base=$(echo ${ALLFILES} | cut -f 1-2 -d . | rev |  cut -d / -f 1 | rev)
    MERGEDFILE="$1/${base}_merged_$(date +%s).json"
    cat ${ALLFILES} >> ${TMPMERGEFILE} &&
    mv ${TMPMERGEFILE} ${MERGEDFILE} &&
    rm ${ALLFILES}                &&  # only if successful
    logger -t monroe-experiments "Appended $FILECOUNT files to ${MERGEDFILE}"
    rm -f ${TMPMERGEFILE} # If step mv (or rm) failed above, always delete the tmpmergefile
  fi;
}

##############################################################################

if [ ! -f "$KEY" ]; then
  logger -t monroe-experiments "repository key does not exist.";
  exit 1;
fi

exec 42>/var/lock/monroe-experiments.lock
flock -n 42 || {
  logger -t monroe-experiments "lock file present";
  exit 1;
}

mk_disk "ping";
mk_disk "metadata";
mk_disk "mplane";

docker rm $(docker ps -aq) 2>/dev/null || true;
MNS="ip netns exec monroe";

if [ -z "$(docker ps --no-trunc|grep $URL_NOOP)" ]; then
  #docker pull $URL_NOOP 2> /dev/null;
  docker run -d --net=bridge $URL_NOOP;
  CID=$(docker ps --no-trunc | grep $URL_NOOP | awk '{print $1}' | head -n 1);
  PID=$(docker inspect -f '{{.State.Pid}}' $CID);
  mkdir -p /var/run/netns;
  rm /var/run/netns/monroe 2>/dev/null;
  ln -s /proc/$PID/ns/net /var/run/netns/monroe;

  # rename the docker bridge interface 'eth0' to 'metadata'
  IP=$($MNS ip route | tail -n 1 | awk '{print $NF}')
  $MNS ifconfig eth0 down;
  $MNS ip link set eth0 name metadata;
  $MNS ifconfig metadata $IP up;

  $MNS multi_client -c /etc/multi-netns-monroe.yaml& 
fi

CID=$(docker ps --no-trunc | grep $URL_NOOP | awk '{print $1}' | head -n 1)

INTERFACES="usb0 usb1 usb2 wlan0 eth0 wwan2";
for IF in $INTERFACES; do
  if [ ! -z "$($MNS ip link|grep $IF)" ]; then continue; fi
  if [ -z "$(ip link|grep $IF)" ]; then continue; fi

  ip link del montmp || true;
  ip link add link $IF montmp type macvlan;
  ip link set montmp netns monroe;
  $MNS ip link set montmp name $IF;

  # TODO: do a proper network configuration, or run multi inside the container
  $MNS ifconfig $IF up;
done

for IF in "usb0" "usb1" "usb2" "wwan0" "eth0" "wwan2"; do
  if [ ! -z "$($MNS ip link|grep $IF)" ]; then
    if [ -z "$(docker ps --no-trunc|grep $URL_PING|grep $IF)" ]; then
      docker pull $URL_PING 2> /dev/null;
      docker run -d --net=container:$CID -v $BASEDIR/ping:/outdir -v /etc/nodeid:/nodeid:ro $URL_PING $IF;
    fi;
  fi;
done

if [ -z "$(docker ps --no-trunc|grep $URL_METADATA)" ]; then
  docker pull $URL_METADATA 2> /dev/null;
  docker run -d --net=container:$CID -v $BASEDIR/metadata:/outdir -v /etc/nodeid:/nodeid:ro $URL_METADATA;
fi

if [ -z "$(docker ps --no-trunc|grep $URL_MPLANE)" ]; then
  docker pull $URL_MPLANE 2> /dev/null;
  docker run -d --net=container:$CID -v $BASEDIR/mplane:/outdir -v /etc/nodeid:/nodeid:ro $URL_MPLANE $MPLANE_PASSWORD;
fi

echo "Starting rsync of $($RSYNC_LS $BASEDIR | grep json | wc -l) source files to $REPO...";
echo rsync $RSYNC_ALL
if eval "rsync $RSYNC_ALL"; then
  echo "rsync done, $($RSYNC_LS $BASEDIR | grep json | wc -l) files arrived while syncing.";
else
  logger -t monroe-experiments "Copying experiment data failed.";
  merge $BASEDIR/ping;
  merge $BASEDIR/metadata;
fi
