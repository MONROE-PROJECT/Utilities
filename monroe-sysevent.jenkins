import java.text.SimpleDateFormat
jobName = "monroe-sysevent"
version = "0.1.1"
build_dir = "."

@Library('jenkins-shared') _

node ('dockermonroe') {
    try {
        notifyBuild('STARTED')
        // Be sure that workspace is cleaned
        deleteDir()
        stage ('Git') {
            git branch: 'master', url: 'git@github.com:MONROE-PROJECT/Utilities.git'
            gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
            shortCommit = gitCommit.take(6)
            commitChangeset = sh(returnStdout: true, script: 'git diff-tree --no-commit-id --name-status -r HEAD').trim()
            commitMessage = sh(returnStdout: true, script: "git show ${gitCommit} --format=%B --name-status").trim()
            sh """echo "${commitMessage}" > CHANGELIST"""
            def dateFormat = new SimpleDateFormat("yyyyMMddHHmm")
            def date = new Date()
            def timestamp = dateFormat.format(date).toString()
            checkout([$class: 'GitSCM',
                    branches: [[name: 'monroe']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'versionize']],
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: 'git@github.com:Celerway/celerway-jenkins.git']]])
        }

        stage ('Build') {
            sh "dpkg -b sysevent ${jobName}.deb"
            sh "chmod +x versionize/versionize.sh; cp versionize/versionize.sh ."
            sh "./versionize.sh ${jobName}.deb ${jobName} ${version} ${shortCommit}"
            sh "rm ${jobName}.deb"
        }
        
        stage ('Archive artifacts') {
            archiveArtifacts "*.deb"
        }
    } catch (e) {
        currentBuild.result = "FAILED"
        throw e
    } finally {
        // Success or failure, always send notifications
		notifyBuild(currentBuild.result)
    } // end of try catch finally block
}
